/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.qyouti;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.io.ByteArrayInputStream;
import java.math.BigInteger;
import javax.swing.JOptionPane;
import org.bouncycastle.bcpg.ArmoredInputStream;
import org.bouncycastle.openpgp.PGPPublicKey;
import org.bouncycastle.openpgp.PGPPublicKeyRing;
import org.bouncycastle.openpgp.operator.bc.BcKeyFingerprintCalculator;

/**
 *
 * @author maber01
 */
public class ImportKeyDialog
        extends javax.swing.JDialog
{

  PGPPublicKey pubkey=null;
  
  
  /**
   * Creates new form ImportKeyDialog
   */
  public ImportKeyDialog(java.awt.Frame parent, boolean modal)
  {
    super(parent, modal);
    initComponents();
  }

  public PGPPublicKey getPublicKey()
  {
    return pubkey;
  }
  
  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
   * content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    jPanel1 = new javax.swing.JPanel();
    jScrollPane1 = new javax.swing.JScrollPane();
    jTextArea1 = new javax.swing.JTextArea();
    pastebutton = new javax.swing.JButton();
    jScrollPane2 = new javax.swing.JScrollPane();
    jTextArea2 = new javax.swing.JTextArea();
    fingerprinttextfield = new javax.swing.JTextField();
    importbutton = new javax.swing.JButton();
    cancelbutton = new javax.swing.JButton();
    jLabel1 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    keyidlabel = new javax.swing.JLabel();
    jLabel4 = new javax.swing.JLabel();
    useridlabel = new javax.swing.JLabel();
    jPanel2 = new javax.swing.JPanel();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

    jScrollPane1.setBorder(null);

    jTextArea1.setEditable(false);
    jTextArea1.setColumns(20);
    jTextArea1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jTextArea1.setLineWrap(true);
    jTextArea1.setRows(5);
    jTextArea1.setText("Copy the other person's key to the clipboard and press the Paste button. The text that is needed will start with \n-----BEGIN PGP PUBLIC KEY BLOCK-----\nand end with \n-----END PGP PUBLIC KEY BLOCK-----\nIt doesn't matter if you select additional text above or below.\n");
    jTextArea1.setWrapStyleWord(true);
    jTextArea1.setBorder(null);
    jTextArea1.setOpaque(false);
    jScrollPane1.setViewportView(jTextArea1);

    pastebutton.setText("Paste");
    pastebutton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        pastebuttonActionPerformed(evt);
      }
    });

    jScrollPane2.setBorder(null);

    jTextArea2.setColumns(20);
    jTextArea2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jTextArea2.setLineWrap(true);
    jTextArea2.setRows(5);
    jTextArea2.setText("If you know the key owner personally contact him/her by phone and ask them to read out the fingerprint for their key. (If they have multiple keys you can tell them the Key Identity above to help them find the right one.) If you don't know the key owner personally, arrange to meet. Ask them to bring photo ID and a copy of the fingerprint after checking photo ID. Enter the fingerprint below and then press the Import button.");
    jTextArea2.setWrapStyleWord(true);
    jTextArea2.setBorder(null);
    jTextArea2.setOpaque(false);
    jScrollPane2.setViewportView(jTextArea2);

    fingerprinttextfield.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        fingerprinttextfieldActionPerformed(evt);
      }
    });

    importbutton.setText("Import and Trust");
    importbutton.setEnabled(false);
    importbutton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        importbuttonActionPerformed(evt);
      }
    });

    cancelbutton.setText("Cancel");
    cancelbutton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        cancelbuttonActionPerformed(evt);
      }
    });

    jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
    jLabel1.setText("Enter Verified Authentic Fingerprint:");

    jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
    jLabel2.setText("Key Identity:");

    jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
    jLabel4.setText("Owner Identity:");

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane1)
          .addComponent(jScrollPane2)
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
              .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
              .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(keyidlabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(useridlabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addComponent(importbutton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(cancelbutton))
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addComponent(pastebutton)
            .addGap(0, 0, Short.MAX_VALUE))
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
            .addGap(18, 18, 18)
            .addComponent(fingerprinttextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(18, 18, 18)
        .addComponent(pastebutton)
        .addGap(18, 18, 18)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel2)
          .addComponent(keyidlabel))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel4)
          .addComponent(useridlabel))
        .addGap(18, 18, 18)
        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(18, 18, 18)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel1)
          .addComponent(fingerprinttextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(importbutton)
          .addComponent(cancelbutton))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 400, Short.MAX_VALUE)
    );
    jPanel2Layout.setVerticalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 300, Short.MAX_VALUE)
    );

    getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void pastebuttonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_pastebuttonActionPerformed
  {//GEN-HEADEREND:event_pastebuttonActionPerformed
    pubkey=null;
    keyidlabel.setText( "" );
    useridlabel.setText( "" );
    fingerprinttextfield.setText("");
    importbutton.setEnabled( false );
    
    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
    Transferable contents = clipboard.getContents( null );
    if ( contents == null || !contents.isDataFlavorSupported(DataFlavor.stringFlavor) )
    {
      JOptionPane.showMessageDialog( rootPane, "There is no text in the clipboard." );
      return;
    }
    
    String armored;
    try
    {
      armored = (String)contents.getTransferData(DataFlavor.stringFlavor);
    }
    catch ( Exception e )
    {
      JOptionPane.showMessageDialog( rootPane, "Technical problem fetching data from the system clipboard." );
      return;      
    }
    
    if ( !armored.contains("BEGIN PGP PUBLIC KEY BLOCK") )
    {
      JOptionPane.showMessageDialog( rootPane, "The text that should start a public key,\n.-----BEGIN PGP PUBLIC KEY BLOCK-----\n, is not in the clipboard text." );
      return;            
    }

    if ( !armored.contains("END PGP PUBLIC KEY BLOCK") )
    {
      JOptionPane.showMessageDialog( rootPane, "The text that should complete a public key,\n.-----END PGP PUBLIC KEY BLOCK-----\n, is not in the clipboard text." );
      return;            
    }
    
    System.out.println( armored );
    
    ByteArrayInputStream bain = new ByteArrayInputStream( armored.getBytes() );
    try ( ArmoredInputStream ain = new ArmoredInputStream( bain ) )
    {
      PGPPublicKeyRing keyring = new PGPPublicKeyRing( ain, new BcKeyFingerprintCalculator() );
      System.out.println( "Read key ring " + keyring.toString() );
      
      pubkey = keyring.getPublicKey();
      keyidlabel.setText( Long.toUnsignedString( pubkey.getKeyID(), 16 ).toUpperCase() );
      useridlabel.setText( pubkey.getUserIDs().next() );
      importbutton.setEnabled( true );
    }
    catch ( Exception e )
    {
      e.printStackTrace();
    }
    
  }//GEN-LAST:event_pastebuttonActionPerformed

  private void importbuttonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_importbuttonActionPerformed
  {//GEN-HEADEREND:event_importbuttonActionPerformed
    
    if ( pubkey == null )
    {
      JOptionPane.showMessageDialog( rootPane, "You have to paste in a public key before you can import it." );
      return;            
    }
    
    String fp = fingerprinttextfield.getText().trim();
    if ( fp.length() == 0 )
    {
      JOptionPane.showMessageDialog( rootPane, "You have to enter the fingerprint of the key before importing." );
      return;            
    }
    
    fp = fp.replaceAll( " ", "" );
    String stripped = fp.replaceAll( "[^0123456789ABCDEFabcdef]", "");
    if ( stripped.length() != fp.length() )
    {
      JOptionPane.showMessageDialog( rootPane, "The text entered into the fingerprint box must only contain space, digits and the letters A, B, C, D, E and F." );
      return;            
    }
    
    BigInteger big = new BigInteger( fp, 16 );
    System.out.println( "Entered fingerprint is " + big.toString( 16 ) );
    
    BigInteger actual = new BigInteger( 1, pubkey.getFingerprint() );
    System.out.println( "Actual fingerprint is " + actual.toString( 16 ) );
    
    if ( !big.equals(actual) )
    {
      JOptionPane.showMessageDialog( rootPane, "The fingerprint you entered does NOT match the given public key. Did you enter it accurately? Has the key owner given you the fingerprint of the right key?" );
      return;            
    }

    JOptionPane.showMessageDialog( rootPane, "The fingerprint you entered matches the key and so the key will be imported." );
    dispose();
    
  }//GEN-LAST:event_importbuttonActionPerformed

  private void cancelbuttonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelbuttonActionPerformed
  {//GEN-HEADEREND:event_cancelbuttonActionPerformed
    pubkey = null;
    dispose();
  }//GEN-LAST:event_cancelbuttonActionPerformed

  private void fingerprinttextfieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_fingerprinttextfieldActionPerformed
  {//GEN-HEADEREND:event_fingerprinttextfieldActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_fingerprinttextfieldActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try
    {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
      {
        if ("Nimbus".equals(info.getName()))
        {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    }
    catch (ClassNotFoundException ex)
    {
      java.util.logging.Logger.getLogger(ImportKeyDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (InstantiationException ex)
    {
      java.util.logging.Logger.getLogger(ImportKeyDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (IllegalAccessException ex)
    {
      java.util.logging.Logger.getLogger(ImportKeyDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (javax.swing.UnsupportedLookAndFeelException ex)
    {
      java.util.logging.Logger.getLogger(ImportKeyDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the dialog */
    java.awt.EventQueue.invokeLater(new Runnable()
    {
      public void run()
      {
        ImportKeyDialog dialog = new ImportKeyDialog(new javax.swing.JFrame(), true);
        dialog.addWindowListener(new java.awt.event.WindowAdapter()
        {
          @Override
          public void windowClosing(java.awt.event.WindowEvent e)
          {
            System.exit(0);
          }
        });
        dialog.setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton cancelbutton;
  private javax.swing.JTextField fingerprinttextfield;
  private javax.swing.JButton importbutton;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JTextArea jTextArea1;
  private javax.swing.JTextArea jTextArea2;
  private javax.swing.JLabel keyidlabel;
  private javax.swing.JButton pastebutton;
  private javax.swing.JLabel useridlabel;
  // End of variables declaration//GEN-END:variables
}
