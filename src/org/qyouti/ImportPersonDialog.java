/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.qyouti;

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.table.*;
import org.qyouti.clipboard.*;
import org.qyouti.data.*;

/**
 *
 * @author jon
 */
public class ImportPersonDialog
        extends javax.swing.JDialog
{

  TablePaster paster = new TablePaster();
  ArrayList<PersonData> list = new ArrayList<>();
  boolean[] errorrows = null;
  ExaminationData exam=null;
  PersonCustomCellRenderer cellrenderer = new PersonCustomCellRenderer();
  
  /**
   * Creates new form ImportCandidateDialog
   */
  public ImportPersonDialog( java.awt.Frame parent, boolean modal )
  {
    super( parent, modal );
    initComponents();
    table.setModel( paster );
    table.setDefaultRenderer( String.class, cellrenderer );
  }

  public ExaminationData getExam()
  {
    return exam;
  }

  public void setExam( ExaminationData exam )
  {
    this.exam = exam;
  }

  public ArrayList<PersonData> getPersonList()
  {
    return list;
  }

  
  
  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {
    java.awt.GridBagConstraints gridBagConstraints;

    delimitergroup = new javax.swing.ButtonGroup();
    toppanel = new javax.swing.JPanel();
    clearpastepanel = new javax.swing.JPanel();
    clearbutton = new javax.swing.JButton();
    pastebutton = new javax.swing.JButton();
    delimiterpanel = new javax.swing.JPanel();
    tabradio = new javax.swing.JRadioButton();
    commaradio = new javax.swing.JRadioButton();
    columnidpanel = new javax.swing.JPanel();
    jLabel4 = new javax.swing.JLabel();
    fullnamecombobox = new javax.swing.JComboBox<>();
    jLabel1 = new javax.swing.JLabel();
    gnamecombobox = new javax.swing.JComboBox<>();
    jLabel2 = new javax.swing.JLabel();
    fnamecombobox = new javax.swing.JComboBox<>();
    jLabel3 = new javax.swing.JLabel();
    idcombobox = new javax.swing.JComboBox<>();
    jPanel1 = new javax.swing.JPanel();
    jScrollPane1 = new javax.swing.JScrollPane();
    jTextArea1 = new javax.swing.JTextArea();
    centrepanel = new javax.swing.JPanel();
    scrollpane = new javax.swing.JScrollPane();
    table = new javax.swing.JTable();
    bottompanel = new javax.swing.JPanel();
    importbutton = new javax.swing.JButton();
    cancelbutton = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle("Import Candidates/Respondents");

    toppanel.setLayout(new java.awt.GridBagLayout());

    clearpastepanel.setLayout(new java.awt.GridBagLayout());

    clearbutton.setText("Clear");
    clearbutton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        clearbuttonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
    clearpastepanel.add(clearbutton, gridBagConstraints);

    pastebutton.setText("Paste");
    pastebutton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        pastebuttonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
    clearpastepanel.add(pastebutton, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
    toppanel.add(clearpastepanel, gridBagConstraints);

    delimiterpanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Delimiter"));
    delimiterpanel.setLayout(new java.awt.GridLayout(0, 1));

    delimitergroup.add(tabradio);
    tabradio.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    tabradio.setSelected(true);
    tabradio.setText("Tab");
    tabradio.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        tabradioActionPerformed(evt);
      }
    });
    delimiterpanel.add(tabradio);

    delimitergroup.add(commaradio);
    commaradio.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    commaradio.setText("Comma");
    commaradio.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        commaradioActionPerformed(evt);
      }
    });
    delimiterpanel.add(commaradio);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
    toppanel.add(delimiterpanel, gridBagConstraints);

    columnidpanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder("Column Assignment"), javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4)));
    columnidpanel.setLayout(new java.awt.GridBagLayout());

    jLabel4.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel4.setText("Full Name:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    columnidpanel.add(jLabel4, gridBagConstraints);

    fullnamecombobox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    fullnamecombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None" }));
    fullnamecombobox.addItemListener(new java.awt.event.ItemListener()
    {
      public void itemStateChanged(java.awt.event.ItemEvent evt)
      {
        fullnamecomboboxItemStateChanged(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    columnidpanel.add(fullnamecombobox, gridBagConstraints);

    jLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel1.setText("Given Name:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    columnidpanel.add(jLabel1, gridBagConstraints);

    gnamecombobox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    gnamecombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None" }));
    gnamecombobox.addItemListener(new java.awt.event.ItemListener()
    {
      public void itemStateChanged(java.awt.event.ItemEvent evt)
      {
        gnamecomboboxItemStateChanged(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    columnidpanel.add(gnamecombobox, gridBagConstraints);

    jLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel2.setText("Family Name:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    columnidpanel.add(jLabel2, gridBagConstraints);

    fnamecombobox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    fnamecombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None" }));
    fnamecombobox.addItemListener(new java.awt.event.ItemListener()
    {
      public void itemStateChanged(java.awt.event.ItemEvent evt)
      {
        fnamecomboboxItemStateChanged(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    columnidpanel.add(fnamecombobox, gridBagConstraints);

    jLabel3.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel3.setText("ID:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    columnidpanel.add(jLabel3, gridBagConstraints);

    idcombobox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    idcombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None" }));
    idcombobox.addItemListener(new java.awt.event.ItemListener()
    {
      public void itemStateChanged(java.awt.event.ItemEvent evt)
      {
        idcomboboxItemStateChanged(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    columnidpanel.add(idcombobox, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
    toppanel.add(columnidpanel, gridBagConstraints);
    toppanel.add(jPanel1, new java.awt.GridBagConstraints());

    jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Help"));
    jScrollPane1.setMinimumSize(new java.awt.Dimension(250, 150));
    jScrollPane1.setOpaque(false);

    jTextArea1.setColumns(20);
    jTextArea1.setLineWrap(true);
    jTextArea1.setRows(5);
    jTextArea1.setText("Copy tab or comma delimited data to the clipboard from your spreadsheet or text application. Then use the Paste button to bring the data here.  You then need to indicate which columns have the necessary data.");
    jTextArea1.setWrapStyleWord(true);
    jTextArea1.setOpaque(false);
    jScrollPane1.setViewportView(jTextArea1);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
    toppanel.add(jScrollPane1, gridBagConstraints);

    getContentPane().add(toppanel, java.awt.BorderLayout.NORTH);

    centrepanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(8, 8, 8, 8), javax.swing.BorderFactory.createTitledBorder("Data Preview")));
    centrepanel.setLayout(new java.awt.CardLayout());

    table.setRowSelectionAllowed(false);
    table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    table.getTableHeader().setReorderingAllowed(false);
    scrollpane.setViewportView(table);

    centrepanel.add(scrollpane, "card2");

    getContentPane().add(centrepanel, java.awt.BorderLayout.CENTER);

    importbutton.setText("Import");
    importbutton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        importbuttonActionPerformed(evt);
      }
    });
    bottompanel.add(importbutton);

    cancelbutton.setText("Cancel");
    cancelbutton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        cancelbuttonActionPerformed(evt);
      }
    });
    bottompanel.add(cancelbutton);

    getContentPane().add(bottompanel, java.awt.BorderLayout.SOUTH);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void cancelbuttonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelbuttonActionPerformed
  {//GEN-HEADEREND:event_cancelbuttonActionPerformed
    list=null;
    this.dispose();
  }//GEN-LAST:event_cancelbuttonActionPerformed

  private void updateComboboxes()
  {
    int cols = paster.getColumnCount();

    fullnamecombobox.removeAllItems();
    gnamecombobox.removeAllItems();
    fnamecombobox.removeAllItems();
    idcombobox.removeAllItems();

    fullnamecombobox.addItem( "Unknown" );
    gnamecombobox.addItem( "Unknown" );
    fnamecombobox.addItem( "Unknown" );
    idcombobox.addItem( "Unknown" );

    for ( int i = 1; i <= cols; i++ )
    {
      fullnamecombobox.addItem( Integer.toString( i ) );
      gnamecombobox.addItem( Integer.toString( i ) );
      fnamecombobox.addItem( Integer.toString( i ) );
      idcombobox.addItem( Integer.toString( i ) );
    }

    fullnamecombobox.setSelectedIndex( 0 );
    gnamecombobox.setSelectedIndex( 0 );
    fnamecombobox.setSelectedIndex( 0 );
    idcombobox.setSelectedIndex( 0 );
  }

  private void updateColumnHeadings()
  {
    int i;
    int cols = paster.getColumnCount();
    if ( cols == 0 )
    {
      return;
    }
    
    for ( i = 0; i < cols; i++ )
    {
      paster.setColumnName( i, null );
    }
    i = fullnamecombobox.getSelectedIndex();
    if ( i > 0 )
    {
      paster.setColumnName( i - 1, "Full Name" );
    }
    i = gnamecombobox.getSelectedIndex();
    if ( i > 0 )
    {
      paster.setColumnName( i - 1, "Given Name" );
    }
    i = fnamecombobox.getSelectedIndex();
    if ( i > 0 )
    {
      paster.setColumnName( i - 1, "Family Name" );
    }
    i = idcombobox.getSelectedIndex();
    if ( i > 0 )
    {
      paster.setColumnName( i - 1, "ID" );
    }

    cellrenderer.setErrorRows( null );

    paster.fireTableStructureChanged();
  }

  private void pastebuttonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_pastebuttonActionPerformed
  {//GEN-HEADEREND:event_pastebuttonActionPerformed
    paster.doPaste();
    updateComboboxes();
  }//GEN-LAST:event_pastebuttonActionPerformed

  private void clearbuttonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clearbuttonActionPerformed
  {//GEN-HEADEREND:event_clearbuttonActionPerformed
    paster.clear();
    updateComboboxes();
  }//GEN-LAST:event_clearbuttonActionPerformed

  private void gnamecomboboxItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_gnamecomboboxItemStateChanged
  {//GEN-HEADEREND:event_gnamecomboboxItemStateChanged
    if ( evt.getStateChange() == ItemEvent.SELECTED )
    {
      this.updateColumnHeadings();
    }
  }//GEN-LAST:event_gnamecomboboxItemStateChanged

  private void fnamecomboboxItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_fnamecomboboxItemStateChanged
  {//GEN-HEADEREND:event_fnamecomboboxItemStateChanged
    if ( evt.getStateChange() == ItemEvent.SELECTED )
    {
      this.updateColumnHeadings();
    }
  }//GEN-LAST:event_fnamecomboboxItemStateChanged

  private void idcomboboxItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_idcomboboxItemStateChanged
  {//GEN-HEADEREND:event_idcomboboxItemStateChanged
    if ( evt.getStateChange() == ItemEvent.SELECTED )
    {
      this.updateColumnHeadings();
    }
  }//GEN-LAST:event_idcomboboxItemStateChanged

  private void importbuttonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_importbuttonActionPerformed
  {//GEN-HEADEREND:event_importbuttonActionPerformed
    if ( paster.getColumnCount() == 0 )
    {
      JOptionPane.
              showMessageDialog( this, "You need to paste data before you can import it." );
      return;
    }
    int a, b, c, d;
    boolean fullname = false;
    a = fullnamecombobox.getSelectedIndex();
    b = gnamecombobox.getSelectedIndex();
    c = fnamecombobox.getSelectedIndex();
    d = idcombobox.getSelectedIndex();
    if ( d < 1 )
    {
      JOptionPane.
              showMessageDialog( this, "You need to use the combo boxes to identify the important columns." );
      return;
    }
    if ( a > 0 )
    {
      if ( a == d )
      {
        JOptionPane.
                showMessageDialog( this, "The full name and the ID can't be in the same column." );
        return;
      }
      fullname = true;
    }
    else
    {
      if ( (b < 1 || c < 1) )
      {
        JOptionPane.
                showMessageDialog( this, "You need to use the combo boxes to identify the columns with the full name or parts of the name." );
        return;
      }
      if ( b == c || c == d || d == b )
      {
        JOptionPane.
                showMessageDialog( this, "You can't indicate different functions for the same column." );
        return;
      }
    }
    
    int i, j;
    int rows = paster.getRowCount();
    PersonData cd, othercd;
    String name;
    for ( i = 0; i < rows; i++ )
    {
      if ( fullname )
        name = paster.getValueAt( i, a-1 ).toString();
      else
        name = paster.getValueAt( i, c-1 ).toString() + ", " + 
               paster.getValueAt( i, b-1 ).toString();
      cd = new PersonData( exam, name, paster.getValueAt( i, d-1 ).toString(), false );
      list.add( cd );
    }

    errorrows = new boolean[list.size()];
    // Check for nulls...
    for ( i = 0; i < list.size(); i++ )
    {
      cd = list.get( i );
      errorrows[i] = false;
      if ( cd.getId() == null || cd.getId().length() == 0 )
        errorrows[i] = true;
    }

    // Check for duplicates...
    for ( i = 0; i < list.size(); i++ )
    {
      cd = list.get( i );
      for ( j=i+1; j<list.size(); j++ )
      {
        othercd = list.get( j );
        if ( cd.getId() != null && cd.getId().equals( othercd.getId() ) )
        {
          errorrows[i] = true;
          errorrows[j] = true;
        }
      }
      // also check existing candidates
      // if provided
      if ( exam != null )
      {
        othercd = exam.persons.get( cd.getId() );
        if ( othercd != null )
          errorrows[i] = true;
      }
    }

    cellrenderer.setErrorRows( errorrows );
    paster.fireTableStructureChanged();

    for ( i = 0; i < list.size(); i++ )
    {
      if ( errorrows[i] )
      {
        JOptionPane.showMessageDialog( this, "Unable to import due to missing or duplicate IDs. Please paste corrected data and try again." );
        return;
      }
    }    
    
//    try
//    {
//      // Output to stdout for debugging....
//      OutputStreamWriter writer = new OutputStreamWriter( System.out );
//      for ( i = 0; i < list.size(); i++ )
//      {
//        list.get( i ).emit( writer );
//      }
//      writer.flush();
//    }
//    catch ( IOException ex )
//    {
//      Logger.getLogger( ImportCandidateDialog.class.getName() ).
//              log( Level.SEVERE, null, ex );
//    }

    dispose();
  }//GEN-LAST:event_importbuttonActionPerformed

  private void fullnamecomboboxItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_fullnamecomboboxItemStateChanged
  {//GEN-HEADEREND:event_fullnamecomboboxItemStateChanged
    if ( evt.getStateChange() == ItemEvent.SELECTED )
    {
      this.updateColumnHeadings();
    }
  }//GEN-LAST:event_fullnamecomboboxItemStateChanged

  private void tabradioActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_tabradioActionPerformed
  {//GEN-HEADEREND:event_tabradioActionPerformed
    paster.setDelimiter( "\t" );
    paster.parse();
    updateComboboxes();
  }//GEN-LAST:event_tabradioActionPerformed

  private void commaradioActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_commaradioActionPerformed
  {//GEN-HEADEREND:event_commaradioActionPerformed
    paster.setDelimiter( "," );
    paster.parse();
    updateComboboxes();
  }//GEN-LAST:event_commaradioActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main( String args[] )
  {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try
    {
      for ( javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.
              getInstalledLookAndFeels() )
      {
        if ( "Nimbus".equals( info.getName() ) )
        {
          javax.swing.UIManager.setLookAndFeel( info.getClassName() );
          break;
        }
      }
    }
    catch ( ClassNotFoundException ex )
    {
      java.util.logging.Logger.
              getLogger(ImportPersonDialog.class.getName() ).
              log( java.util.logging.Level.SEVERE, null, ex );
    }
    catch ( InstantiationException ex )
    {
      java.util.logging.Logger.
              getLogger(ImportPersonDialog.class.getName() ).
              log( java.util.logging.Level.SEVERE, null, ex );
    }
    catch ( IllegalAccessException ex )
    {
      java.util.logging.Logger.
              getLogger(ImportPersonDialog.class.getName() ).
              log( java.util.logging.Level.SEVERE, null, ex );
    }
    catch ( javax.swing.UnsupportedLookAndFeelException ex )
    {
      java.util.logging.Logger.
              getLogger(ImportPersonDialog.class.getName() ).
              log( java.util.logging.Level.SEVERE, null, ex );
    }
    //</editor-fold>
    //</editor-fold>

    /* Create and display the dialog */
    java.awt.EventQueue.invokeLater(new Runnable()
    {
      public void run()
      {
        ImportPersonDialog dialog = new ImportPersonDialog( new javax.swing.JFrame(), true );
        dialog.addWindowListener( new java.awt.event.WindowAdapter()
        {
          @Override
          public void windowClosing( java.awt.event.WindowEvent e )
          {
            System.exit( 0 );
          }
        } );
        dialog.setVisible( true );
      }
    } );
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel bottompanel;
  private javax.swing.JButton cancelbutton;
  private javax.swing.JPanel centrepanel;
  private javax.swing.JButton clearbutton;
  private javax.swing.JPanel clearpastepanel;
  private javax.swing.JPanel columnidpanel;
  private javax.swing.JRadioButton commaradio;
  private javax.swing.ButtonGroup delimitergroup;
  private javax.swing.JPanel delimiterpanel;
  private javax.swing.JComboBox<String> fnamecombobox;
  private javax.swing.JComboBox<String> fullnamecombobox;
  private javax.swing.JComboBox<String> gnamecombobox;
  private javax.swing.JComboBox<String> idcombobox;
  private javax.swing.JButton importbutton;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JTextArea jTextArea1;
  private javax.swing.JButton pastebutton;
  private javax.swing.JScrollPane scrollpane;
  private javax.swing.JTable table;
  private javax.swing.JRadioButton tabradio;
  private javax.swing.JPanel toppanel;
  // End of variables declaration//GEN-END:variables


class PersonCustomCellRenderer extends DefaultTableCellRenderer
{
  boolean[] errorrows;
  
  @Override
  public Component getTableCellRendererComponent( JTable table, 
                                                  Object value,
                                                  boolean isSelected,
                                                  boolean hasFocus, 
                                                  int row,
                                                  int column )
  {
    Component com = super.getTableCellRendererComponent( table, value, isSelected, hasFocus, row, column );
    if ( errorrows!=null && row<errorrows.length && errorrows[row] )
      com.setForeground( Color.RED );
    else
      com.setForeground( Color.BLACK );
    return com;
  }

  public boolean[] getErrorRows()
  {
    return errorrows;
  }

  public void setErrorRows( boolean[] errorrows )
  {
    this.errorrows = errorrows;
  }
}


}
