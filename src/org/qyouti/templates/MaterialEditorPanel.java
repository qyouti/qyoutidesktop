/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.qyouti.templates;

import java.awt.*;
import java.util.*;
import java.util.List;
import javax.swing.*;
import org.qyouti.qti1.*;
import org.qyouti.qti1.element.*;

/**
 *
 * @author jon
 */
public class MaterialEditorPanel
        extends javax.swing.JPanel
{
  QTIElementMaterial material;
  List<QTIMatmedia> media;
  boolean changed=false;

  /**
   * Creates new form MaterialEditorPanel
   */
  public MaterialEditorPanel( QTIElementMaterial material )
  {
    this.material = material;
    initComponents();
    List<QTIMatmedia> media = material.findElements( QTIMatmedia.class, false );
    QTIMatmedia mm;
    //GridBagConstraints gbc;
    MattextPanel mattextpanel;
    
    for ( int i=0; i<media.size(); i++ )
    {
      mm = media.get( i );
      //gbc = new GridBagConstraints();
      //gbc.gridx = 0;
      if ( !mm.isSupported() )
      {
        this.add( new JLabel("Unsupported media here.") );//, gbc );
      }
      else if ( mm instanceof QTIElementMattext )
      {
        mattextpanel = new MattextPanel( (QTIElementMattext) mm );
        mattextpanel.setMinimumSize( new Dimension(200,100) );
        this.add( mattextpanel ); //, gbc );
      }
      else
      {
        this.add( new JLabel("Supported media - editing not yet implemented.") ); //, gbc );
      }
    }
  }

  @Override
  public void setEnabled( boolean enabled )
  {
    super.setEnabled( enabled );
    for ( int i=0; i<this.getComponentCount(); i++ )
      getComponent( i ).setEnabled( enabled );
  }

  public boolean isChanged()
  {
    evaluateChange();
    return changed;
  }

  void evaluateChange()
  {
    boolean b;
    Component c;
    
    for ( int i=0; i<this.getComponentCount(); i++ )
    {
      c = this.getComponent( i );
      if ( c instanceof MattextPanel )
        changed = changed || ((MattextPanel)c).isChanged();
    }
  }

  void store()
  {
    Component c;
    
    for ( int i=0; i<this.getComponentCount(); i++ )
    {
      c = this.getComponent( i );
      if ( c instanceof MattextPanel )
        ((MattextPanel)c).store();
    }    
  }
  
  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    setLayout(new java.awt.GridLayout(0, 1));
  }// </editor-fold>//GEN-END:initComponents


  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
}
