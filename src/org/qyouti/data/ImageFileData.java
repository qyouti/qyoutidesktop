/*
 *
 * Copyright 2010 Leeds Metropolitan University
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may 
 * not use this file except in compliance with the License. You may obtain 
 * a copy of the License at 
 * 
 * http://www.apache.org/licenses/LICENSE-2.0 
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License. 
 *
 *
 */



/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package org.qyouti.data;

import java.awt.Rectangle;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.awt.image.LookupOp;
import java.io.*;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

/**
 * Represents a file that was the source of page images. Could be a single
 * image in JPEG, PNG etc. format or could be a file that contains
 * multiple images, specifically a PDF generated by a document scanner.
 * 
 * @author jon
 */
public class ImageFileData
{
  ExaminationData exam;

  String ident;
  String source;
  String error=null;    
  String importedname=null;
  //File importedfile=null;
  boolean imported=false;
  boolean processed=false;
  long importeddate;
  String digest;

  public ImageFileData( ExaminationData exam,
                    String source,
                    String suffix,
                    String ident )
  {
    this.exam = exam;
    this.source = source;
    this.importedname = ident + "." + suffix;
    this.ident = ident;
  }


  public ImageFileData( ExaminationData exam,
                    Element element )
  {
    this.exam = exam;
    this.ident        = element.getAttribute( "ident" );
    this.source       = element.getAttribute( "source" );
    this.importedname = element.getAttribute( "importedname" );
    this.importeddate = new Long( element.getAttribute( "importeddate" ) ).longValue();
    this.digest       = element.getAttribute( "digest" );
    this.imported    = "true".equalsIgnoreCase( element.getAttribute( "imported" ) );
    this.processed    = "true".equalsIgnoreCase( element.getAttribute( "processed" ) );
    NodeList nl = element.getElementsByTagName( "error" );
    if ( nl.getLength() == 1 )
      this.error = nl.item( 0 ).getTextContent();    
  }

  public String getError()
  {
    return error;
  }

  public void setError( String error )
  {
    this.error = error;
  }

  public boolean isImported()
  {
    return imported;
  }

  public void setImported( boolean imported )
  {
    this.imported = imported;
  }
  
  public boolean isProcessed()
  {
    return processed;
  }

  public void setProcessed( boolean processed )
  {
    this.processed = processed;
  }

  public long getImporteddate()
  {
    return importeddate;
  }

  public void setImporteddate( long importeddate )
  {
    this.importeddate = importeddate;
  }

  public String getDigest()
  {
    return digest;
  }

  public void setDigest( String digest )
  {
    this.digest = digest;
  }

  public ExaminationData getExam()
  {
    return exam;
  }

  public String getIdent()
  {
    return ident;
  }

  public String getSource()
  {
    return source;
  }

  public String getImportedname()
  {
    return importedname;
  }

  public void setImportedname( String importedname )
  {
    this.importedname = importedname;
  }

  
  
  
  public void emit( Writer writer )
          throws IOException
  {
    writer.write( "    <file " );
    writer.write( "ident=\""        + ident            + "\" " );
    writer.write( "source=\""       + source           + "\" " );
    writer.write( "importedname=\"" + importedname     + "\" " );
    writer.write( "importeddate=\"" + importeddate     + "\" " );
    writer.write( "digest=\""       + digest           + "\" " );
    writer.write( "imported=\"" );
    writer.write( imported?"true":"false" );
    writer.write( "\" processed=\"" );
    writer.write( processed?"true":"false" );
    writer.write( "\" " );
    writer.write( ">\r\n" );
    if ( error != null )
    {
      writer.write( "      <error>" );
      writer.write( error );
      writer.write( "</error>\r\n" );
    }
    writer.write( "    </file>\r\n" );
  }
}
