/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.qyouti;

import java.io.*;
import java.util.logging.*;
import javax.swing.*;
import org.qyouti.data.*;

/**
 *
 * @author jon
 */
public class QyoutiFrame
        extends javax.swing.JFrame
{

  File examfolder = null;
  ExaminationData exam;
  String baseFolder;
  String examname=null;
  
  ExamSelectDialog selectdialog;
  
  /**
   * Creates new form QyoutiFrame
   */
  public QyoutiFrame()
  {
    selectdialog = new ExamSelectDialog( this, true );
    selectdialog.setFrame( this );
    initComponents();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {
    java.awt.GridBagConstraints gridBagConstraints;

    spacerlabel = new javax.swing.JLabel();
    tabs = new javax.swing.JTabbedPane();
    qtab = new javax.swing.JPanel();
    sp1 = new javax.swing.JScrollPane();
    questiontable = new javax.swing.JTable();
    ctab = new javax.swing.JPanel();
    sp2 = new javax.swing.JScrollPane();
    candidatetable = new javax.swing.JTable();
    stab = new javax.swing.JPanel();
    sp3 = new javax.swing.JScrollPane();
    scanstable = new javax.swing.JTable();
    rtab = new javax.swing.JPanel();
    resptoppanel = new javax.swing.JPanel();
    respheadpanel = new javax.swing.JPanel();
    respleftpanel = new javax.swing.JPanel();
    resptopleftpanel = new javax.swing.JPanel();
    previouscandidatebutton = new javax.swing.JButton();
    respbottomleftpanel = new javax.swing.JPanel();
    previousquestionbutton = new javax.swing.JButton();
    resppropertypanel = new javax.swing.JPanel();
    l1 = new javax.swing.JLabel();
    candidatelabel = new javax.swing.JLabel();
    l2 = new javax.swing.JLabel();
    idlabel = new javax.swing.JLabel();
    l3 = new javax.swing.JLabel();
    pagelabel = new javax.swing.JLabel();
    l4 = new javax.swing.JLabel();
    sourcelabel = new javax.swing.JLabel();
    l5 = new javax.swing.JLabel();
    heightlabel = new javax.swing.JLabel();
    l6 = new javax.swing.JLabel();
    questionlabel = new javax.swing.JLabel();
    resprightpanel = new javax.swing.JPanel();
    resptoprightpanel = new javax.swing.JPanel();
    nextcandidatebutton = new javax.swing.JButton();
    respbottomrightpanel = new javax.swing.JPanel();
    nextquestionbutton = new javax.swing.JButton();
    outcomepabel = new javax.swing.JPanel();
    outcometable = new javax.swing.JTable();
    sp4 = new javax.swing.JScrollPane();
    responsetable = new javax.swing.JTable();
    menubar = new javax.swing.JMenuBar();
    filemenu = new javax.swing.JMenu();
    newmenuitem = new javax.swing.JMenuItem();
    openmenuitem = new javax.swing.JMenuItem();
    propsmenuitem = new javax.swing.JMenuItem();
    pdfprintmenuitem = new javax.swing.JMenuItem();
    sep1 = new javax.swing.JPopupMenu.Separator();
    configmenuitem = new javax.swing.JMenuItem();
    exitmenuitem = new javax.swing.JMenuItem();
    actionmenu = new javax.swing.JMenu();
    importqmenuitem = new javax.swing.JMenuItem();
    previewqmenuitem = new javax.swing.JMenuItem();
    itemanalysismenuitem = new javax.swing.JMenuItem();
    sep2 = new javax.swing.JPopupMenu.Separator();
    preprocmenuitem = new javax.swing.JMenuItem();
    importimagesmenuitem = new javax.swing.JMenuItem();
    clearimagemenuitem = new javax.swing.JMenuItem();
    sep3 = new javax.swing.JPopupMenu.Separator();
    importcanmenuitem = new javax.swing.JMenuItem();
    expscoresmenuitem = new javax.swing.JMenuItem();
    exprepliesmenuitem = new javax.swing.JMenuItem();
    expreportmenuitem = new javax.swing.JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Qyouti Exam/Survey Processor");

    spacerlabel.setText(" ");
    getContentPane().add(spacerlabel, java.awt.BorderLayout.PAGE_START);

    qtab.setLayout(new java.awt.BorderLayout());

    questiontable.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][]
      {

      },
      new String []
      {
        "ID", "Title"
      }
    )
    {
      Class[] types = new Class []
      {
        java.lang.String.class, java.lang.String.class
      };
      boolean[] canEdit = new boolean []
      {
        false, false
      };

      public Class getColumnClass(int columnIndex)
      {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex)
      {
        return canEdit [columnIndex];
      }
    });
    sp1.setViewportView(questiontable);

    qtab.add(sp1, java.awt.BorderLayout.CENTER);

    tabs.addTab("Questions", qtab);

    ctab.setLayout(new java.awt.BorderLayout());

    candidatetable.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][]
      {

      },
      new String []
      {
        "*", "Name", "ID", "Pages", "Questions", "Errors"
      }
    )
    {
      Class[] types = new Class []
      {
        java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
      };
      boolean[] canEdit = new boolean []
      {
        false, false, false, false, false, false
      };

      public Class getColumnClass(int columnIndex)
      {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex)
      {
        return canEdit [columnIndex];
      }
    });
    sp2.setViewportView(candidatetable);

    ctab.add(sp2, java.awt.BorderLayout.CENTER);

    tabs.addTab("Candidates", ctab);

    stab.setLayout(new java.awt.BorderLayout());

    scanstable.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][]
      {

      },
      new String []
      {
        "No.", "File", "Code", "Error"
      }
    )
    {
      Class[] types = new Class []
      {
        java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
      };
      boolean[] canEdit = new boolean []
      {
        false, false, false, false
      };

      public Class getColumnClass(int columnIndex)
      {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex)
      {
        return canEdit [columnIndex];
      }
    });
    sp3.setViewportView(scanstable);

    stab.add(sp3, java.awt.BorderLayout.CENTER);

    tabs.addTab("Scans", stab);

    rtab.setLayout(new java.awt.BorderLayout());

    resptoppanel.setLayout(new java.awt.BorderLayout());

    respheadpanel.setLayout(new java.awt.BorderLayout());

    respleftpanel.setLayout(new java.awt.BorderLayout());

    resptopleftpanel.setLayout(new java.awt.BorderLayout());

    previouscandidatebutton.setText("Previous");
    previouscandidatebutton.setEnabled(false);
    resptopleftpanel.add(previouscandidatebutton, java.awt.BorderLayout.CENTER);

    respleftpanel.add(resptopleftpanel, java.awt.BorderLayout.NORTH);

    respbottomleftpanel.setLayout(new java.awt.BorderLayout());

    previousquestionbutton.setText("Previous");
    previousquestionbutton.setEnabled(false);
    previousquestionbutton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        previousquestionbuttonActionPerformed(evt);
      }
    });
    respbottomleftpanel.add(previousquestionbutton, java.awt.BorderLayout.PAGE_START);

    respleftpanel.add(respbottomleftpanel, java.awt.BorderLayout.SOUTH);

    respheadpanel.add(respleftpanel, java.awt.BorderLayout.WEST);

    resppropertypanel.setLayout(new java.awt.GridLayout(6, 2, 15, 2));

    l1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
    l1.setText("Candidate:");
    resppropertypanel.add(l1);

    candidatelabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    resppropertypanel.add(candidatelabel);

    l2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
    l2.setText("ID:");
    resppropertypanel.add(l2);

    idlabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    resppropertypanel.add(idlabel);

    l3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
    l3.setText("Page:");
    resppropertypanel.add(l3);

    pagelabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    resppropertypanel.add(pagelabel);

    l4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
    l4.setText("Source:");
    resppropertypanel.add(l4);

    sourcelabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    resppropertypanel.add(sourcelabel);

    l5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
    l5.setText("Height:");
    resppropertypanel.add(l5);

    heightlabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    resppropertypanel.add(heightlabel);

    l6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
    l6.setText("Question:");
    resppropertypanel.add(l6);

    questionlabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    resppropertypanel.add(questionlabel);

    respheadpanel.add(resppropertypanel, java.awt.BorderLayout.CENTER);

    resprightpanel.setLayout(new java.awt.BorderLayout());

    resptoprightpanel.setLayout(new java.awt.BorderLayout());

    nextcandidatebutton.setText("Next");
    nextcandidatebutton.setEnabled(false);
    resptoprightpanel.add(nextcandidatebutton, java.awt.BorderLayout.CENTER);

    resprightpanel.add(resptoprightpanel, java.awt.BorderLayout.NORTH);

    respbottomrightpanel.setLayout(new java.awt.BorderLayout());

    nextquestionbutton.setText("Next");
    nextquestionbutton.setEnabled(false);
    respbottomrightpanel.add(nextquestionbutton, java.awt.BorderLayout.CENTER);

    resprightpanel.add(respbottomrightpanel, java.awt.BorderLayout.SOUTH);

    respheadpanel.add(resprightpanel, java.awt.BorderLayout.EAST);

    resptoppanel.add(respheadpanel, java.awt.BorderLayout.PAGE_START);

    outcomepabel.setBorder(javax.swing.BorderFactory.createTitledBorder("Outcomes"));
    outcomepabel.setLayout(new java.awt.BorderLayout());

    outcometable.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][]
      {
        {null, null}
      },
      new String []
      {
        "Title 1", "Title 2"
      }
    )
    {
      boolean[] canEdit = new boolean []
      {
        false, true
      };

      public boolean isCellEditable(int rowIndex, int columnIndex)
      {
        return canEdit [columnIndex];
      }
    });
    outcomepabel.add(outcometable, java.awt.BorderLayout.CENTER);

    resptoppanel.add(outcomepabel, java.awt.BorderLayout.CENTER);

    rtab.add(resptoppanel, java.awt.BorderLayout.NORTH);

    responsetable.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][]
      {

      },
      new String []
      {
        "*", "Response", "Enhanced", "Interpreted", "Override"
      }
    )
    {
      Class[] types = new Class []
      {
        java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class
      };
      boolean[] canEdit = new boolean []
      {
        false, false, false, false, true
      };

      public Class getColumnClass(int columnIndex)
      {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex)
      {
        return canEdit [columnIndex];
      }
    });
    sp4.setViewportView(responsetable);

    rtab.add(sp4, java.awt.BorderLayout.CENTER);

    tabs.addTab("Responses", rtab);

    getContentPane().add(tabs, java.awt.BorderLayout.CENTER);

    filemenu.setText("File");

    newmenuitem.setText("New Exam/Survey...");
    newmenuitem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        newmenuitemActionPerformed(evt);
      }
    });
    filemenu.add(newmenuitem);

    openmenuitem.setText("Open Exam/Survey...");
    openmenuitem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        openmenuitemActionPerformed(evt);
      }
    });
    filemenu.add(openmenuitem);

    propsmenuitem.setText("Exam/Survey Properties...");
    propsmenuitem.setEnabled(false);
    filemenu.add(propsmenuitem);

    pdfprintmenuitem.setText("Print to PDF");
    pdfprintmenuitem.setEnabled(false);
    filemenu.add(pdfprintmenuitem);
    filemenu.add(sep1);

    configmenuitem.setText("Configure...");
    filemenu.add(configmenuitem);

    exitmenuitem.setText("Exit");
    filemenu.add(exitmenuitem);

    menubar.add(filemenu);

    actionmenu.setText("Action");

    importqmenuitem.setText("Import Questions...");
    importqmenuitem.setEnabled(false);
    importqmenuitem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        importqmenuitemActionPerformed(evt);
      }
    });
    actionmenu.add(importqmenuitem);

    previewqmenuitem.setText("Preview Question");
    previewqmenuitem.setEnabled(false);
    actionmenu.add(previewqmenuitem);

    itemanalysismenuitem.setText("Item Analysis");
    itemanalysismenuitem.setEnabled(false);
    itemanalysismenuitem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        itemanalysismenuitemActionPerformed(evt);
      }
    });
    actionmenu.add(itemanalysismenuitem);
    actionmenu.add(sep2);

    preprocmenuitem.setText("Preprocess Scanned Images...");
    preprocmenuitem.setEnabled(false);
    actionmenu.add(preprocmenuitem);

    importimagesmenuitem.setText("Import Scanned Images...");
    importimagesmenuitem.setEnabled(false);
    actionmenu.add(importimagesmenuitem);

    clearimagemenuitem.setText("Clear Image Data");
    clearimagemenuitem.setEnabled(false);
    actionmenu.add(clearimagemenuitem);
    actionmenu.add(sep3);

    importcanmenuitem.setText("Import Candidates...");
    importcanmenuitem.setEnabled(false);
    importcanmenuitem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        importcanmenuitemActionPerformed(evt);
      }
    });
    actionmenu.add(importcanmenuitem);

    expscoresmenuitem.setText("Export Scores...");
    expscoresmenuitem.setEnabled(false);
    expscoresmenuitem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        expscoresmenuitemActionPerformed(evt);
      }
    });
    actionmenu.add(expscoresmenuitem);

    exprepliesmenuitem.setText("Export Replies...");
    exprepliesmenuitem.setEnabled(false);
    actionmenu.add(exprepliesmenuitem);

    expreportmenuitem.setText("Export Report...");
    expreportmenuitem.setEnabled(false);
    actionmenu.add(expreportmenuitem);

    menubar.add(actionmenu);

    setJMenuBar(menubar);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void importqmenuitemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_importqmenuitemActionPerformed
  {//GEN-HEADEREND:event_importqmenuitemActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_importqmenuitemActionPerformed

  private void itemanalysismenuitemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_itemanalysismenuitemActionPerformed
  {//GEN-HEADEREND:event_itemanalysismenuitemActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_itemanalysismenuitemActionPerformed

  private void expscoresmenuitemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_expscoresmenuitemActionPerformed
  {//GEN-HEADEREND:event_expscoresmenuitemActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_expscoresmenuitemActionPerformed

  private void previousquestionbuttonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_previousquestionbuttonActionPerformed
  {//GEN-HEADEREND:event_previousquestionbuttonActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_previousquestionbuttonActionPerformed

  private void openmenuitemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_openmenuitemActionPerformed
  {//GEN-HEADEREND:event_openmenuitemActionPerformed
    if ( selectdialog.getBaseFolder() == null || "".equals( selectdialog.getBaseFolder() ) )
    {
      File homefolder = new File(System.getProperty("user.home"));
      File qfolder = new File( homefolder, "qyouti" );
      if ( !qfolder.exists() )
        qfolder.mkdir();
      selectdialog.setBaseFolder( qfolder.getAbsolutePath() );
    }
    
    selectdialog.setExamName( "" );

    //selectdialog.setBaseFolder( );
    selectdialog.setDialogType( ExamSelectDialog.TYPE_OPEN );
    selectdialog.setVisible( true );
    
  }//GEN-LAST:event_openmenuitemActionPerformed

  private void importcanmenuitemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_importcanmenuitemActionPerformed
  {//GEN-HEADEREND:event_importcanmenuitemActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_importcanmenuitemActionPerformed

  private void newmenuitemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_newmenuitemActionPerformed
  {//GEN-HEADEREND:event_newmenuitemActionPerformed
    
    if ( selectdialog.getBaseFolder() == null || "".equals( selectdialog.getBaseFolder() ) )
    {
      File homefolder = new File(System.getProperty("user.home"));
      File qfolder = new File( homefolder, "qyouti" );
      if ( !qfolder.exists() )
        qfolder.mkdir();
      selectdialog.setBaseFolder( qfolder.getAbsolutePath() );
    }
    
    selectdialog.setExamName( "" );

    //selectdialog.setBaseFolder( );
    selectdialog.setDialogType( ExamSelectDialog.TYPE_NEW );
    selectdialog.setVisible( true );
    
  }//GEN-LAST:event_newmenuitemActionPerformed

  boolean examSelectDialogDone()
  {
    File base = new File( selectdialog.getBaseFolder() );
    File fold = new File( base, selectdialog.getExamName() );
    
    if ( selectdialog.getDialogType() == ExamSelectDialog.TYPE_NEW )
    {
      System.out.println( "Make new exam/survey: " + selectdialog.getExamName() );
      if ( fold.exists() )
      {
        JOptionPane.showMessageDialog( this, "There is already a folder with that name - choose a different name." );
        return false;
      }
    }
    
    if ( selectdialog.getDialogType() == ExamSelectDialog.TYPE_OPEN )
    {
      System.out.println( "Open exam/survey: " + selectdialog.getExamName() );
      loadExam( fold );
    }
    
    return true;
  }
  
  
  
  
    private void loadExam( File examfolder )
    {

      try
      {
        exam = new ExaminationData(null, new File(examfolder, "qyouti.xml"));
        scanstable.setModel( exam.pagelistmodel );
        candidatetable.setModel(exam);
        exam.load();
        setTitle( "Qyouti - " + examfolder.getName() );
        if (exam.qdefs != null)
        {
          questiontable.setModel(exam.qdefs);
        }
        gotoQuestion( null );
        for (int i = 0; i < exam.candidates_sorted.size(); i++)
        {
          //System.out.println( "Checking candidate " + exam.candidates_sorted.get( i ).name );
          for (int j = 0; j < exam.candidates_sorted.get(i).pages.size(); j++)
          {
            //System.out.println( "Checking page " + exam.candidates_sorted.get( i ).pages.get(j).source );
            if (exam.candidates_sorted.get(i).pages.get(j).questions.size() > 0)
            {
              //System.out.println( "Found first marked question " + exam.candidates_sorted.get(i).pages.get(j).questions.firstElement().ident );
              gotoQuestion(exam.candidates_sorted.get(i).pages.get(j).questions.firstElement());
              return;
            }
          }
        }
      } catch (Exception ex)
      {
        Logger.getLogger(QyoutiView.class.getName()).log(Level.SEVERE, null, ex);
      }

    }
  
    
  private void clearResponseTable()
  {
    responsetable.setModel(new javax.swing.table.DefaultTableModel(
            new Object[][]
            {
            },
            new String[]
            {
              "*", "Response", "Enhanced", "Interpretation", "Overide"
            })
    {

      Class[] types = new Class[]
      {
        java.lang.String.class,
        javax.swing.Icon.class,
        javax.swing.Icon.class,
        java.lang.Boolean.class,
        java.lang.Boolean.class
      };
      boolean[] canEdit = new boolean[]
      {
        false, false, false, false, true
      };

      public Class getColumnClass(int columnIndex)
      {
        return types[columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex)
      {
        return canEdit[columnIndex];
      }
    });
  }

    
    
    
  public void gotoQuestion(QuestionData question)
  {
    int i;

    //System.out.println( "gotoQuestion " + question );

    if (question == null)
    {
      clearResponseTable();
      candidatelabel.setText("");
      idlabel.setText("");
      pagelabel.setText("");
      sourcelabel.setText("");
      heightlabel.setText("");
      questionlabel.setText("");
      outcometable.setModel( new OutcomeData() );
      nextquestionbutton.setEnabled(false);
      previousquestionbutton.setEnabled(false);
      nextcandidatebutton.setEnabled(false);
      previouscandidatebutton.setEnabled(false);
      return;
    }

    candidatelabel.setText(question.page.candidate_name);
    idlabel.setText(question.page.candidate_number);
    pagelabel.setText(Integer.toString(question.page.page_number));
    sourcelabel.setText(question.page.source);
    if ( question.page.height != 0.0 )
      heightlabel.setText(Double.toString(question.page.height));
    questionlabel.setText(question.ident);
    responsetable.setModel(question);

    outcometable.setModel(question.outcomes);


    QuestionData next, previous;
    next = question.nextQuestionData();
    previous = question.previousQuestionData();
    nextquestionbutton.setEnabled(next != null);
    previousquestionbutton.setEnabled(previous != null);

    CandidateData candidate = question.page.candidate;
    CandidateData nextc = candidate.nextCandidateData(true);
    CandidateData previousc = candidate.previousCandidateData(true);
    nextcandidatebutton.setEnabled(nextc != null);
    previouscandidatebutton.setEnabled(previousc != null);
  }
    
  
  
  /**
   * @param args the command line arguments
   */
  public static void main( String args[] )
  {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try
    {
      for ( javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.
              getInstalledLookAndFeels() )
      {
        if ( "Nimbus".equals( info.getName() ) )
        {
          javax.swing.UIManager.setLookAndFeel( info.getClassName() );
          break;
        }
      }
    }
    catch ( ClassNotFoundException ex )
    {
      java.util.logging.Logger.getLogger( QyoutiFrame.class.getName() ).
              log( java.util.logging.Level.SEVERE, null, ex );
    }
    catch ( InstantiationException ex )
    {
      java.util.logging.Logger.getLogger( QyoutiFrame.class.getName() ).
              log( java.util.logging.Level.SEVERE, null, ex );
    }
    catch ( IllegalAccessException ex )
    {
      java.util.logging.Logger.getLogger( QyoutiFrame.class.getName() ).
              log( java.util.logging.Level.SEVERE, null, ex );
    }
    catch ( javax.swing.UnsupportedLookAndFeelException ex )
    {
      java.util.logging.Logger.getLogger( QyoutiFrame.class.getName() ).
              log( java.util.logging.Level.SEVERE, null, ex );
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater( new Runnable()
    {
      public void run()
      {
        new QyoutiFrame().setVisible( true );
      }
    } );
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JMenu actionmenu;
  private javax.swing.JLabel candidatelabel;
  private javax.swing.JTable candidatetable;
  private javax.swing.JMenuItem clearimagemenuitem;
  private javax.swing.JMenuItem configmenuitem;
  private javax.swing.JPanel ctab;
  private javax.swing.JMenuItem exitmenuitem;
  private javax.swing.JMenuItem exprepliesmenuitem;
  private javax.swing.JMenuItem expreportmenuitem;
  private javax.swing.JMenuItem expscoresmenuitem;
  private javax.swing.JMenu filemenu;
  private javax.swing.JLabel heightlabel;
  private javax.swing.JLabel idlabel;
  private javax.swing.JMenuItem importcanmenuitem;
  private javax.swing.JMenuItem importimagesmenuitem;
  private javax.swing.JMenuItem importqmenuitem;
  private javax.swing.JMenuItem itemanalysismenuitem;
  private javax.swing.JLabel l1;
  private javax.swing.JLabel l2;
  private javax.swing.JLabel l3;
  private javax.swing.JLabel l4;
  private javax.swing.JLabel l5;
  private javax.swing.JLabel l6;
  private javax.swing.JMenuBar menubar;
  private javax.swing.JMenuItem newmenuitem;
  private javax.swing.JButton nextcandidatebutton;
  private javax.swing.JButton nextquestionbutton;
  private javax.swing.JMenuItem openmenuitem;
  private javax.swing.JPanel outcomepabel;
  private javax.swing.JTable outcometable;
  private javax.swing.JLabel pagelabel;
  private javax.swing.JMenuItem pdfprintmenuitem;
  private javax.swing.JMenuItem preprocmenuitem;
  private javax.swing.JMenuItem previewqmenuitem;
  private javax.swing.JButton previouscandidatebutton;
  private javax.swing.JButton previousquestionbutton;
  private javax.swing.JMenuItem propsmenuitem;
  private javax.swing.JPanel qtab;
  private javax.swing.JLabel questionlabel;
  private javax.swing.JTable questiontable;
  private javax.swing.JPanel respbottomleftpanel;
  private javax.swing.JPanel respbottomrightpanel;
  private javax.swing.JPanel respheadpanel;
  private javax.swing.JPanel respleftpanel;
  private javax.swing.JTable responsetable;
  private javax.swing.JPanel resppropertypanel;
  private javax.swing.JPanel resprightpanel;
  private javax.swing.JPanel resptopleftpanel;
  private javax.swing.JPanel resptoppanel;
  private javax.swing.JPanel resptoprightpanel;
  private javax.swing.JPanel rtab;
  private javax.swing.JTable scanstable;
  private javax.swing.JPopupMenu.Separator sep1;
  private javax.swing.JPopupMenu.Separator sep2;
  private javax.swing.JPopupMenu.Separator sep3;
  private javax.swing.JLabel sourcelabel;
  private javax.swing.JScrollPane sp1;
  private javax.swing.JScrollPane sp2;
  private javax.swing.JScrollPane sp3;
  private javax.swing.JScrollPane sp4;
  private javax.swing.JLabel spacerlabel;
  private javax.swing.JPanel stab;
  private javax.swing.JTabbedPane tabs;
  // End of variables declaration//GEN-END:variables
}
