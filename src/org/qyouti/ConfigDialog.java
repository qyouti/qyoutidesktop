/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.qyouti;

import java.awt.*;
import java.util.*;
import javax.swing.*;
import org.qyouti.fonts.*;

/**
 *
 * @author jon
 */
public class ConfigDialog
        extends javax.swing.JDialog
{
  QyoutiFontManager qfm;
  FontListModel sansmodel;      
  FontListModel serifmodel;      
  FontListModel monomodel;      
  /**
   * Creates new form ConfigDialog
   */
  public ConfigDialog( java.awt.Frame parent, QyoutiFontManager qfm )
  {
    super( parent, true );
    this.setTitle( "Configuration Options" );
    this.qfm = qfm;
    initComponents();
    if ( qfm == null ) return;
    
    sansmodel  = new FontListModel( qfm.getFontFamilyNames(  QyoutiFontManager.SET_SANS  ) );
    serifmodel = new FontListModel( qfm.getFontFamilyNames(  QyoutiFontManager.SET_SERIF ) );
    monomodel  = new FontListModel( qfm.getFontFamilyNames(  QyoutiFontManager.SET_MONO  ) );
    
     sanslist.setModel( sansmodel );
    seriflist.setModel( serifmodel );
     monolist.setModel( monomodel );
    
    ((CardLayout)rightpanel.getLayout()).show( rightpanel, "messagecard" );
    LoadedThread thread = new LoadedThread();
    thread.start();
  }

  class LoadedThread extends Thread
  {

    @Override
    public void run()
    {
      availablefontlist.setModel( new FontListModel( qfm.getFontFamilyNames(  QyoutiFontManager.SET_SEARCH ) ) );
      ((CardLayout)rightpanel.getLayout()).show( rightpanel, "listcard" );
      insertbutton.setEnabled( true );
    }
    
  }
  
  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {
    java.awt.GridBagConstraints gridBagConstraints;

    jTabbedPane1 = new javax.swing.JTabbedPane();
    fonttab = new javax.swing.JPanel();
    jSplitPane1 = new javax.swing.JSplitPane();
    jPanel9 = new javax.swing.JPanel();
    fontchaintabbedpane = new javax.swing.JTabbedPane();
    sanstab = new javax.swing.JPanel();
    jScrollPane2 = new javax.swing.JScrollPane();
    sanslist = new javax.swing.JList<>();
    seriftab = new javax.swing.JPanel();
    jScrollPane3 = new javax.swing.JScrollPane();
    seriflist = new javax.swing.JList<>();
    monotab = new javax.swing.JPanel();
    jScrollPane4 = new javax.swing.JScrollPane();
    monolist = new javax.swing.JList<>();
    jPanel10 = new javax.swing.JPanel();
    upbutton = new javax.swing.JButton();
    downbutton = new javax.swing.JButton();
    insertbutton = new javax.swing.JButton();
    removebutton = new javax.swing.JButton();
    jPanel6 = new javax.swing.JPanel();
    rightpanel = new javax.swing.JPanel();
    jScrollPane1 = new javax.swing.JScrollPane();
    availablefontlist = new javax.swing.JList<>();
    jPanel1 = new javax.swing.JPanel();
    jScrollPane5 = new javax.swing.JScrollPane();
    jTextArea1 = new javax.swing.JTextArea();
    jPanel2 = new javax.swing.JPanel();
    savebutton = new javax.swing.JButton();
    resetbutton = new javax.swing.JButton();
    cancelbutton = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

    fonttab.setLayout(new java.awt.BorderLayout());

    jPanel9.setLayout(new java.awt.BorderLayout());

    fontchaintabbedpane.setTabPlacement(javax.swing.JTabbedPane.LEFT);

    sanstab.setLayout(new java.awt.BorderLayout());

    sanslist.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    jScrollPane2.setViewportView(sanslist);

    sanstab.add(jScrollPane2, java.awt.BorderLayout.CENTER);

    fontchaintabbedpane.addTab("Sans Serif", sanstab);

    seriftab.setLayout(new java.awt.BorderLayout());

    seriflist.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    jScrollPane3.setViewportView(seriflist);

    seriftab.add(jScrollPane3, java.awt.BorderLayout.CENTER);

    fontchaintabbedpane.addTab("Serif", seriftab);

    monotab.setLayout(new java.awt.BorderLayout());

    monolist.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    jScrollPane4.setViewportView(monolist);

    monotab.add(jScrollPane4, java.awt.BorderLayout.CENTER);

    fontchaintabbedpane.addTab("Monospace", monotab);

    jPanel9.add(fontchaintabbedpane, java.awt.BorderLayout.CENTER);

    jPanel10.setLayout(new java.awt.GridBagLayout());

    upbutton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
    upbutton.setText("^Move Up");
    upbutton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        upbuttonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel10.add(upbutton, gridBagConstraints);

    downbutton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
    downbutton.setText("v Move Down");
    downbutton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        downbuttonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridy = 3;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel10.add(downbutton, gridBagConstraints);

    insertbutton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
    insertbutton.setText("<Add");
    insertbutton.setEnabled(false);
    insertbutton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        insertbuttonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel10.add(insertbutton, gridBagConstraints);

    removebutton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
    removebutton.setText("Remove>");
    removebutton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        removebuttonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel10.add(removebutton, gridBagConstraints);

    jPanel9.add(jPanel10, java.awt.BorderLayout.EAST);

    jSplitPane1.setLeftComponent(jPanel9);

    jPanel6.setLayout(new java.awt.BorderLayout());

    rightpanel.setLayout(new java.awt.CardLayout());

    availablefontlist.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    jScrollPane1.setViewportView(availablefontlist);

    rightpanel.add(jScrollPane1, "listcard");

    jPanel1.setLayout(new java.awt.BorderLayout());

    jTextArea1.setColumns(20);
    jTextArea1.setLineWrap(true);
    jTextArea1.setRows(5);
    jTextArea1.setText("Scanning for PDF compatible fonts installed in your operating system....\n");
    jTextArea1.setWrapStyleWord(true);
    jTextArea1.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4));
    jTextArea1.setOpaque(false);
    jScrollPane5.setViewportView(jTextArea1);

    jPanel1.add(jScrollPane5, java.awt.BorderLayout.CENTER);

    rightpanel.add(jPanel1, "messagecard");

    jPanel6.add(rightpanel, java.awt.BorderLayout.CENTER);

    jSplitPane1.setRightComponent(jPanel6);

    fonttab.add(jSplitPane1, java.awt.BorderLayout.CENTER);

    jTabbedPane1.addTab("Fonts", fonttab);

    getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

    savebutton.setText("Save");
    savebutton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        savebuttonActionPerformed(evt);
      }
    });
    jPanel2.add(savebutton);

    resetbutton.setText("Reset");
    resetbutton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        resetbuttonActionPerformed(evt);
      }
    });
    jPanel2.add(resetbutton);

    cancelbutton.setText("Cancel");
    cancelbutton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        cancelbuttonActionPerformed(evt);
      }
    });
    jPanel2.add(cancelbutton);

    getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void savebuttonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_savebuttonActionPerformed
  {//GEN-HEADEREND:event_savebuttonActionPerformed
    
    qfm.setFontFamilyNames( QyoutiFontManager.SET_SANS,   sansmodel.toArray() );
    qfm.setFontFamilyNames( QyoutiFontManager.SET_SERIF, serifmodel.toArray() );
    qfm.setFontFamilyNames( QyoutiFontManager.SET_MONO,   monomodel.toArray() );
    if ( qfm.reInitialise() )
    {
      dispose();
      return;
    }
    
    JOptionPane.showMessageDialog( this, "There was a technical problem saving your new configuration." );   
  }//GEN-LAST:event_savebuttonActionPerformed

  private void cancelbuttonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelbuttonActionPerformed
  {//GEN-HEADEREND:event_cancelbuttonActionPerformed
    this.dispose();
  }//GEN-LAST:event_cancelbuttonActionPerformed

  private void upbuttonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_upbuttonActionPerformed
  {//GEN-HEADEREND:event_upbuttonActionPerformed
    int selection = getSelection();
    if ( selection < 0 )
    {
      JOptionPane.showMessageDialog( this, "You need to select a font family in the list to move it." );
      return;
    }
    if ( selection == 0 )
    {
      JOptionPane.showMessageDialog( this, "The selected font is already at the top." );
      return;
    }

    FontListModel model = getModel();
    model.moveUp( selection );
    setSelection( selection-1 );
  }//GEN-LAST:event_upbuttonActionPerformed

  private void downbuttonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_downbuttonActionPerformed
  {//GEN-HEADEREND:event_downbuttonActionPerformed
    int selection = getSelection();
    if ( selection < 0 )
    {
      JOptionPane.showMessageDialog( this, "You need to select a font family in the list to move it." );
      return;
    }

    FontListModel model = getModel();
    if ( selection == model.getSize()-1 )
    {
      JOptionPane.showMessageDialog( this, "The selected font is already at the bottom." );
      return;
    }

    model.moveDown( selection );
    setSelection( selection+1 );
  }//GEN-LAST:event_downbuttonActionPerformed

  private FontListModel getModel()
  {
    int t = fontchaintabbedpane.getSelectedIndex();
    FontListModel model = sansmodel;
    switch ( t )
    {
      case 0:
        model = sansmodel;
        break;
      case 1:
        model = serifmodel;
        break;
      case 2:
        model = monomodel;
        break;
    }
    return model;
  }
  
  private int getSelection()
  {
    int t = fontchaintabbedpane.getSelectedIndex();
    JList list  = sanslist;
    switch ( t )
    {
      case 0:
        list = sanslist;
        break;
      case 1:
        list = seriflist;
        break;
      case 2:
        list = monolist;
        break;
    }
    return list.getSelectedIndex();
  }

  private void setSelection( int n)
  {
    int t = fontchaintabbedpane.getSelectedIndex();
    JList list  = sanslist;
    switch ( t )
    {
      case 0:
        list = sanslist;
        break;
      case 1:
        list = seriflist;
        break;
      case 2:
        list = monolist;
        break;
    }
    list.setSelectedIndex( n );
  }
  
  private void insertbuttonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_insertbuttonActionPerformed
  {//GEN-HEADEREND:event_insertbuttonActionPerformed
    String str = availablefontlist.getSelectedValue();
    if ( str == null || str.length() == 0 )
    {
      JOptionPane.showMessageDialog( this, "You need to select a font family in the available fonts list." );
      return;
    }
    FontListModel model = getModel();
    if ( model.contains( str ) )
    {
      JOptionPane.showMessageDialog( this, "The list already has that font family in it." );
      return;
    }
    
    model.add( str );    
  }//GEN-LAST:event_insertbuttonActionPerformed

  private void removebuttonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_removebuttonActionPerformed
  {//GEN-HEADEREND:event_removebuttonActionPerformed
    int selection = getSelection();
    if ( selection < 0 )
    {
      JOptionPane.showMessageDialog( this, "You need to select a font family in the list to remove it." );
      return;
    }

    FontListModel model = getModel();
    model.remove( selection );
    
  }//GEN-LAST:event_removebuttonActionPerformed

  private void resetbuttonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetbuttonActionPerformed
  {//GEN-HEADEREND:event_resetbuttonActionPerformed
    qfm.reset();
    dispose();
  }//GEN-LAST:event_resetbuttonActionPerformed

  class FontListModel extends AbstractListModel
  {
    ArrayList<String> list;
    
    FontListModel( String[] list )
    {
      this.list = new ArrayList<>();
      for ( String s : list )
        this.list.add( s );
    }

    public String[] toArray()
    {
      return list.toArray( new String[list.size()] );
    }
    
    @Override
    public int getSize()
    {
      return list.size();
    }

    @Override
    public Object getElementAt( int index )
    {
      return list.get( index );
    }

    public boolean contains( String s )
    {
      return list.contains( s );
    }
    
    public void add( String s )
    {
      list.add( s );
      this.fireIntervalAdded( list, list.size()-1, list.size()-1 );
    }
    
    public void remove( int n )
    {
      list.remove( n );
      this.fireIntervalRemoved( list, n, n );
    }

    public void moveUp( int n )
    {
      if ( n == 0 ) return;
      String swap = list.get( n );
      list.set( n, list.get( n-1 ) );
      list.set( n-1, swap );
      this.fireContentsChanged( swap, n-1, n );
    }

    public void moveDown( int n )
    {
      if ( n == list.size()-1 ) return;
      String swap = list.get( n );
      list.set( n, list.get( n+1 ) );
      list.set( n+1, swap );
      this.fireContentsChanged( swap, n, n+1 );
    }
  }
  
  
  /**
   * @param args the command line arguments
   */
  public static void main( String args[] )
  {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try
    {
      for ( javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.
              getInstalledLookAndFeels() )
      {
        if ( "Nimbus".equals( info.getName() ) )
        {
          javax.swing.UIManager.setLookAndFeel( info.getClassName() );
          break;
        }
      }
    }
    catch ( ClassNotFoundException ex )
    {
      java.util.logging.Logger.getLogger( ConfigDialog.class.getName() ).
              log( java.util.logging.Level.SEVERE, null, ex );
    }
    catch ( InstantiationException ex )
    {
      java.util.logging.Logger.getLogger( ConfigDialog.class.getName() ).
              log( java.util.logging.Level.SEVERE, null, ex );
    }
    catch ( IllegalAccessException ex )
    {
      java.util.logging.Logger.getLogger( ConfigDialog.class.getName() ).
              log( java.util.logging.Level.SEVERE, null, ex );
    }
    catch ( javax.swing.UnsupportedLookAndFeelException ex )
    {
      java.util.logging.Logger.getLogger( ConfigDialog.class.getName() ).
              log( java.util.logging.Level.SEVERE, null, ex );
    }
    //</editor-fold>

    /* Create and display the dialog */
    java.awt.EventQueue.invokeLater( new Runnable()
    {
      public void run()
      {
        ConfigDialog dialog = new ConfigDialog( new javax.swing.JFrame(), null );
        dialog.addWindowListener( new java.awt.event.WindowAdapter()
        {
          @Override
          public void windowClosing( java.awt.event.WindowEvent e )
          {
            System.exit( 0 );
          }
        } );
        dialog.setVisible( true );
      }
    } );
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JList<String> availablefontlist;
  private javax.swing.JButton cancelbutton;
  private javax.swing.JButton downbutton;
  private javax.swing.JTabbedPane fontchaintabbedpane;
  private javax.swing.JPanel fonttab;
  private javax.swing.JButton insertbutton;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel10;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JPanel jPanel6;
  private javax.swing.JPanel jPanel9;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JScrollPane jScrollPane3;
  private javax.swing.JScrollPane jScrollPane4;
  private javax.swing.JScrollPane jScrollPane5;
  private javax.swing.JSplitPane jSplitPane1;
  private javax.swing.JTabbedPane jTabbedPane1;
  private javax.swing.JTextArea jTextArea1;
  private javax.swing.JList<String> monolist;
  private javax.swing.JPanel monotab;
  private javax.swing.JButton removebutton;
  private javax.swing.JButton resetbutton;
  private javax.swing.JPanel rightpanel;
  private javax.swing.JList<String> sanslist;
  private javax.swing.JPanel sanstab;
  private javax.swing.JButton savebutton;
  private javax.swing.JList<String> seriflist;
  private javax.swing.JPanel seriftab;
  private javax.swing.JButton upbutton;
  // End of variables declaration//GEN-END:variables
}
