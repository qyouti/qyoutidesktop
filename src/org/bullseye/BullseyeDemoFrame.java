/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.bullseye;

import java.awt.*;
import java.awt.image.*;
import java.io.*;
import java.util.*;
import javax.imageio.*;
import javax.swing.*;

/**
 *
 * @author jon
 */
public class BullseyeDemoFrame
        extends javax.swing.JFrame
        implements BullseyeLocator.ProgressListener
{
  BullseyeLocator bullseyelocator = null;
  Random r;
  
  /**
   * Creates new form DemoFrame
   */
  public BullseyeDemoFrame()
  {
    initComponents();
    r = new Random();
    r.setSeed( System.currentTimeMillis() );
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    progressbar = new javax.swing.JProgressBar();
    jScrollPane1 = new javax.swing.JScrollPane();
    mainpanel = new javax.swing.JPanel();
    inputimagelabel = new javax.swing.JLabel();
    outputimagelabel = new javax.swing.JLabel();
    voteimagelabel = new javax.swing.JLabel();
    menubar = new javax.swing.JMenuBar();
    filemenu = new javax.swing.JMenu();
    openmenuitem = new javax.swing.JMenuItem();
    genmenuitem = new javax.swing.JMenuItem();
    sep1 = new javax.swing.JPopupMenu.Separator();
    exitmenuitem = new javax.swing.JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Bullseye Demo");
    setBounds(new java.awt.Rectangle(0, 0, 800, 500));
    setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    setMinimumSize(new java.awt.Dimension(800, 500));
    getContentPane().add(progressbar, java.awt.BorderLayout.SOUTH);

    jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
    jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

    mainpanel.setLayout(new java.awt.GridLayout(1, 3));
    mainpanel.add(inputimagelabel);
    mainpanel.add(outputimagelabel);
    mainpanel.add(voteimagelabel);

    jScrollPane1.setViewportView(mainpanel);

    getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

    filemenu.setText("File");

    openmenuitem.setText("Open...");
    openmenuitem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        openmenuitemActionPerformed(evt);
      }
    });
    filemenu.add(openmenuitem);

    genmenuitem.setText("Generate");
    genmenuitem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        genmenuitemActionPerformed(evt);
      }
    });
    filemenu.add(genmenuitem);
    filemenu.add(sep1);

    exitmenuitem.setText("Exit");
    exitmenuitem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        exitmenuitemActionPerformed(evt);
      }
    });
    filemenu.add(exitmenuitem);

    menubar.add(filemenu);

    setJMenuBar(menubar);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void openmenuitemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_openmenuitemActionPerformed
  {//GEN-HEADEREND:event_openmenuitemActionPerformed

    final JFileChooser fc = new JFileChooser();
    fc.addChoosableFileFilter( new javax.swing.filechooser.FileFilter()
    {

      @Override
      public boolean accept( File f )
      {
        if ( f.isDirectory() )
        {
          return true;
        }
        return f.getName().toLowerCase().endsWith( ".jpg" );
      }

      @Override
      public String getDescription()
      {
        return "JPEG image files.";
      }
    } );

    int returnVal = fc.showOpenDialog( this );

    if ( returnVal != JFileChooser.APPROVE_OPTION )
    {
      return;
    }
    
    File file = fc.getSelectedFile();
    BufferedImage image;
    try
    {
      image = ImageIO.read( file );
      image.getType();
      inputimagelabel.setIcon( new ImageIcon( image ) );
      bullseyelocator = new BullseyeLocator( image, 45.0, BullseyeGenerator.RADII );
      bullseyelocator.addProgressListener( this );
      bullseyelocator.start();
    }
    catch (Exception e)
    {
      JOptionPane.showMessageDialog(null, "Error loading image. \n" + e.getMessage() );
      e.printStackTrace();
    }


  }//GEN-LAST:event_openmenuitemActionPerformed

  @Override
  public void notifyProgress( int percentage )
  {
    this.progressbar.setValue( percentage );
  }

  public void notifyPassComplete()
  {
    outputimagelabel.setIcon( new ImageIcon( bullseyelocator.getPixelTypeMap()         ) );
      voteimagelabel.setIcon( new ImageIcon( bullseyelocator.getVoteMapImage()         ) );
    // fvoteimagelabel.setIcon( new ImageIcon( bullseyelocator.getFilteredVoteMapImage() ) );
  }
  
  public void notifyComplete()
  {
    Point[] points = bullseyelocator.getLocations();
    Point p;
    Graphics2D g = bullseyelocator.getInputImage().createGraphics();
    for ( int i=0; i<points.length; i++ )
    {
      p = points[i];
      g.setColor( Color.red );
      g.drawLine( p.x - 20, p.y,      p.x + 20, p.y      );
      g.drawLine( p.x,      p.y - 20, p.x,      p.y + 20 );
      this.inputimagelabel.repaint();
    }
    g.dispose();
    bullseyelocator.removeProgressListener( this );
    //JOptionPane.showMessageDialog(null, "Processing complete." );
    bullseyelocator = null;        
  }
  
  
  private void exitmenuitemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exitmenuitemActionPerformed
  {//GEN-HEADEREND:event_exitmenuitemActionPerformed
    System.exit( 0 );
  }//GEN-LAST:event_exitmenuitemActionPerformed

  private void genmenuitemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_genmenuitemActionPerformed
  {//GEN-HEADEREND:event_genmenuitemActionPerformed
    try
    {
      // different scale for generator and locator to simulate
      // getting the scale wrong on a scanned page.
      double genrad = 50.0;
      double locrad = 50.0 + r.nextGaussian()*0.5;
      System.out.println( "=====================" );
      System.out.println( "Generating bullseye radius = " + genrad );
      System.out.println( "Locating   bullseye radius = " + locrad );
      double[] gen_radii = BullseyeGenerator.scaleRadii( genrad );
      
      boolean with = r.nextBoolean();
      //with = true;
      System.out.println( "With? " + with );
      BufferedImage image = BullseyeGenerator.createBullseyeImage( with?gen_radii:null );
      inputimagelabel.setIcon( new ImageIcon( image ) );
      bullseyelocator = new BullseyeLocator( image, locrad, BullseyeGenerator.RADII );
      bullseyelocator.addProgressListener( this );
      bullseyelocator.start();
    }
    catch (Exception e)
    {
      JOptionPane.showMessageDialog(null, "Error loading image. \n" + e.getMessage() );
      e.printStackTrace();
    }
    // TODO add your handling code here:
  }//GEN-LAST:event_genmenuitemActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main( String args[] )
  {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try
    {
      for ( javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.
              getInstalledLookAndFeels() )
      {
        if ( "Nimbus".equals( info.getName() ) )
        {
          javax.swing.UIManager.setLookAndFeel( info.getClassName() );
          break;
        }
      }
    }
    catch ( ClassNotFoundException ex )
    {
      java.util.logging.Logger.getLogger(BullseyeDemoFrame.class.getName() ).
              log( java.util.logging.Level.SEVERE, null, ex );
    }
    catch ( InstantiationException ex )
    {
      java.util.logging.Logger.getLogger(BullseyeDemoFrame.class.getName() ).
              log( java.util.logging.Level.SEVERE, null, ex );
    }
    catch ( IllegalAccessException ex )
    {
      java.util.logging.Logger.getLogger(BullseyeDemoFrame.class.getName() ).
              log( java.util.logging.Level.SEVERE, null, ex );
    }
    catch ( javax.swing.UnsupportedLookAndFeelException ex )
    {
      java.util.logging.Logger.getLogger(BullseyeDemoFrame.class.getName() ).
              log( java.util.logging.Level.SEVERE, null, ex );
    }
    //</editor-fold>
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable()
    {
      public void run()
      {
        new BullseyeDemoFrame().setVisible( true );
      }
    } );
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JMenuItem exitmenuitem;
  private javax.swing.JMenu filemenu;
  private javax.swing.JMenuItem genmenuitem;
  private javax.swing.JLabel inputimagelabel;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JPanel mainpanel;
  private javax.swing.JMenuBar menubar;
  private javax.swing.JMenuItem openmenuitem;
  private javax.swing.JLabel outputimagelabel;
  private javax.swing.JProgressBar progressbar;
  private javax.swing.JPopupMenu.Separator sep1;
  private javax.swing.JLabel voteimagelabel;
  // End of variables declaration//GEN-END:variables

}
