/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.bullseye;

import java.awt.*;
import java.awt.image.*;
import java.io.*;
import java.util.*;
import java.util.logging.*;
import javax.imageio.*;
import javax.swing.*;

/**
 *
 * @author jon
 */
public class XDemoFrame
        extends javax.swing.JFrame
        implements XLocatorListener
{
  XLocator xlocator = null;
  Random r;
  ImageComponent lastinputimg;
  JPanel[] rowpanels;
  File[] filelist;
  BufferedImage[] imagelist;
  int nextfile;
  
  /**
   * Creates new form DemoFrame
   */
  public XDemoFrame()
  {
    initComponents();
    r = new Random();
    r.setSeed( System.currentTimeMillis() );
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    progressbar = new javax.swing.JProgressBar();
    jScrollPane1 = new javax.swing.JScrollPane();
    mainpanel = new javax.swing.JPanel();
    menubar = new javax.swing.JMenuBar();
    filemenu = new javax.swing.JMenu();
    openmenuitem = new javax.swing.JMenuItem();
    testfoldermenuitem = new javax.swing.JMenuItem();
    testcardmenuitem = new javax.swing.JMenuItem();
    sep1 = new javax.swing.JPopupMenu.Separator();
    exitmenuitem = new javax.swing.JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Bullseye Demo");
    setBounds(new java.awt.Rectangle(0, 0, 800, 500));
    setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    setMinimumSize(new java.awt.Dimension(300, 200));
    getContentPane().add(progressbar, java.awt.BorderLayout.SOUTH);

    jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
    jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

    mainpanel.setLayout(new java.awt.GridLayout(0, 1, 0, 4));
    jScrollPane1.setViewportView(mainpanel);

    getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

    filemenu.setText("File");

    openmenuitem.setText("Open...");
    openmenuitem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        openmenuitemActionPerformed(evt);
      }
    });
    filemenu.add(openmenuitem);

    testfoldermenuitem.setText("Test Folder");
    testfoldermenuitem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        testfoldermenuitemActionPerformed(evt);
      }
    });
    filemenu.add(testfoldermenuitem);

    testcardmenuitem.setText("Test Cards");
    testcardmenuitem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        testcardmenuitemActionPerformed(evt);
      }
    });
    filemenu.add(testcardmenuitem);
    filemenu.add(sep1);

    exitmenuitem.setText("Exit");
    exitmenuitem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        exitmenuitemActionPerformed(evt);
      }
    });
    filemenu.add(exitmenuitem);

    menubar.add(filemenu);

    setJMenuBar(menubar);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void openmenuitemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_openmenuitemActionPerformed
  {//GEN-HEADEREND:event_openmenuitemActionPerformed

    final JFileChooser fc = new JFileChooser();
    fc.setCurrentDirectory( new File("/home/jon/qyouti/test_x/scans" ) );
    fc.addChoosableFileFilter( new javax.swing.filechooser.FileFilter()
    {

      @Override
      public boolean accept( File f )
      {
        if ( f.isDirectory() )
        {
          return true;
        }
        return f.getName().toLowerCase().endsWith( ".jpg" );
      }

      @Override
      public String getDescription()
      {
        return "JPEG image files.";
      }
    } );

    int returnVal = fc.showOpenDialog( this );

    if ( returnVal != JFileChooser.APPROVE_OPTION )
    {
      return;
    }
    
    File file = fc.getSelectedFile();
    filelist = new File[1];
    filelist[0] = file;
    startSet();
  }//GEN-LAST:event_openmenuitemActionPerformed

  ImageComponent addImage( BufferedImage image, int i )
  {
    int n;
    JPanel row = rowpanels[i];
    Component c;
    ImageComponent ic;
    for ( n=1; n<row.getComponentCount(); n++ )
    {
      c = row.getComponent( n );
      if ( !(c instanceof ImageComponent) )
        continue;
      ic = (ImageComponent)c;
      if ( ic.getImage() == null )
      {
        ic.setImage( image );
        return ic;
      }
    }
    return null;
  }
  
  @Override
  public void notifyProgress( int percentage )
  {
    this.progressbar.setValue( percentage );
  }

  
  public void notifyComplete( XLocatorReport report, int n )
  {
    int i;
    Point p;
    Graphics2D g;
    java.util.List<Point> plist;
    BufferedImage image = report.getImage();

    p = report.getXLocation();
    if ( p != null )
    {
      g = image.createGraphics();
      g.setColor( Color.BLUE );
      g.drawLine( p.x - 2, p.y - 2, p.x + 2, p.y + 2 );
      g.drawLine( p.x - 2, p.y + 2, p.x + 2, p.y - 2 );
      g.dispose();

      plist = report.getXPointsofInterest();
      for ( i=0; i<plist.size(); i++ )
      {
        p = plist.get( i );
        image.setRGB( p.x, p.y, 0xff0000 );
      }
    }
    
    plist = report.getAdditionalPointsofInterest();
    for ( i=0; i<plist.size(); i++ )
    {
      p = plist.get( i );
      image.setRGB( p.x, p.y, 0x8000 );
    }
    
    JPanel row = rowpanels[n];
    row.getComponent( 1 ).repaint();
    JLabel label = (JLabel)row.getComponent( 0 );
    StringBuffer buffer = new StringBuffer();
    buffer.append( filelist[n].getName() );
    buffer.append( " " );
    buffer.append( report.getPercentageCentreEdgePixels() < 0.5?"BLANK ":"MARK " );
    if ( report.hasX() )
    {
      if ( report.getAdditionalPointsofInterest().size() == 0 )
        buffer.append( "  CLEAR" );
      else
        buffer.append( " DUBIOUS");
    }
    else
      buffer.append( " NO");
    label.setText( buffer.toString() );
  }

  @Override
  public void notifyNewDebugImage( BufferedImage image, int i )
  {
    addImage( image, i );
  }
  
  
  private void exitmenuitemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exitmenuitemActionPerformed
  {//GEN-HEADEREND:event_exitmenuitemActionPerformed
    System.exit( 0 );
  }//GEN-LAST:event_exitmenuitemActionPerformed

  void startSet()
  {
    int n, i;
    if ( filelist == null || nextfile != 0 )
      return;
    
    mainpanel.removeAll();
    rowpanels = new JPanel[filelist.length];
    for ( n=0; n<filelist.length; n++ )
    {
      rowpanels[n] = new JPanel();
      rowpanels[n].setLayout( new GridLayout( 1, 0 ) );
      mainpanel.add( rowpanels[n] );
      rowpanels[n].add( new JLabel(filelist[n].getName()) );
      for ( i=0; i<19; i++ )
        rowpanels[n].add( new ImageComponent( 70, 70 ) );
    }
    this.pack();
    
    try
    {
      xlocator = new XLocator( 100, 100 );
      xlocator.setDebugLevel( 2 );
      xlocator.addProgressListener( this );
      xlocator.setImageFiles( filelist );
      xlocator.start();
    }
    catch (Exception e)
    {
      JOptionPane.showMessageDialog(null, "Error loading image. \n" + e.getMessage() );
      e.printStackTrace();
    }
      
  }
  
  void startNext()
  {
//    if ( filelist == null || nextfile == filelist.length )
//      return;
//
//    BufferedImage image;
//    try
//    {
//      System.out.println( "Starting " + filelist[nextfile] );
//      image = ImageIO.read( filelist[nextfile] );
//      lastinputimg = addImage( image );
//      if ( xlocator == null )
//        xlocator = new XLocator( 50, 50 );
//      xlocator.setImage( image );
//      xlocator.addProgressListener( this );
//      xlocator.start();
//    }
//    catch (Exception e)
//    {
//      JOptionPane.showMessageDialog(null, "Error loading image. \n" + e.getMessage() );
//      e.printStackTrace();
//    }
//    
  }
  
  
  private void testfoldermenuitemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_testfoldermenuitemActionPerformed
  {//GEN-HEADEREND:event_testfoldermenuitemActionPerformed
    File base = new File("/home/jon/qyouti/testimages" );
    filelist = base.listFiles( 
            new FileFilter() {
      @Override
      public boolean accept( File f )
      {
        if ( !f.isFile() )
          return false;
        return f.getName().toLowerCase().endsWith( ".jpg" );
      }
    }
    );
    Arrays.sort( filelist, new Comparator<File>() {
      @Override
      public int compare( File o1, File o2 )
      {
        return o1.getName().compareTo( o2.getName() );
      }
    } );
    nextfile = 0;
    startSet();
  }//GEN-LAST:event_testfoldermenuitemActionPerformed

  private void testcardmenuitemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_testcardmenuitemActionPerformed
  {//GEN-HEADEREND:event_testcardmenuitemActionPerformed
    
    int i;
    File folder = new File( "/home/jon/qyouti/testcards" );

    BufferedImage image;
    Graphics2D g;

    filelist = new File[80];
    for ( i=0; i<80; i++ )
    {
      try
      {
        filelist[i] = new File( folder, "testcard_" + i + ".gif" );
        image = new BufferedImage( 40, 40, BufferedImage.TYPE_BYTE_GRAY );
        g = image.createGraphics();
        g.setColor( Color.WHITE );
        g.fillRect( -40, -40, 80, 80 );
        g.translate( 20, 20 );
        g.rotate( 2.0 * Math.PI * (double)i / (double)80 );
        g.setColor( Color.BLACK );
        g.fillRect( -40, -40, 40, 80 );
        g.dispose();
        ImageIO.write( image, "GIF", filelist[i] );
      }
      catch ( IOException ex )
      {
        Logger.getLogger( XDemoFrame.class.getName() ).log( Level.SEVERE, null, ex );
        return;
      }
    }
    nextfile = 0;
    startSet();
  }//GEN-LAST:event_testcardmenuitemActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main( String args[] )
  {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try
    {
      for ( javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.
              getInstalledLookAndFeels() )
      {
        if ( "Nimbus".equals( info.getName() ) )
        {
          javax.swing.UIManager.setLookAndFeel( info.getClassName() );
          break;
        }
      }
    }
    catch ( ClassNotFoundException ex )
    {
      java.util.logging.Logger.getLogger(XDemoFrame.class.getName() ).
              log( java.util.logging.Level.SEVERE, null, ex );
    }
    catch ( InstantiationException ex )
    {
      java.util.logging.Logger.getLogger(XDemoFrame.class.getName() ).
              log( java.util.logging.Level.SEVERE, null, ex );
    }
    catch ( IllegalAccessException ex )
    {
      java.util.logging.Logger.getLogger(XDemoFrame.class.getName() ).
              log( java.util.logging.Level.SEVERE, null, ex );
    }
    catch ( javax.swing.UnsupportedLookAndFeelException ex )
    {
      java.util.logging.Logger.getLogger(XDemoFrame.class.getName() ).
              log( java.util.logging.Level.SEVERE, null, ex );
    }
    //</editor-fold>
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable()
    {
      public void run()
      {
        new XDemoFrame().setVisible( true );
      }
    } );
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JMenuItem exitmenuitem;
  private javax.swing.JMenu filemenu;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JPanel mainpanel;
  private javax.swing.JMenuBar menubar;
  private javax.swing.JMenuItem openmenuitem;
  private javax.swing.JProgressBar progressbar;
  private javax.swing.JPopupMenu.Separator sep1;
  private javax.swing.JMenuItem testcardmenuitem;
  private javax.swing.JMenuItem testfoldermenuitem;
  // End of variables declaration//GEN-END:variables

}
