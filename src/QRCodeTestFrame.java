/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * QRCodeTestFrame.java
 *
 * Created on 20-Aug-2009, 14:28:40
 */


import com.google.zxing.*;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.*;
import com.google.zxing.qrcode.QRCodeReader;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;
import com.google.zxing.qrcode.encoder.Encoder;
import com.google.zxing.qrcode.encoder.QRCode;
import java.awt.image.BufferedImage;
import java.io.*;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.*;
import org.qyouti.barcode.ZXingCodec;

/**
 *
 * @author jon
 */
public class QRCodeTestFrame
        extends javax.swing.JFrame
        implements Runnable
{
  java.util.Random random = new java.util.Random(System.currentTimeMillis());
  BufferedImage image;
  String task = "oneshot";

  /** Creates new form QRCodeTestFrame */
  public QRCodeTestFrame()
  {
    initComponents();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    jPanel5 = new javax.swing.JPanel();
    jPanel1 = new javax.swing.JPanel();
    jLabel2 = new javax.swing.JLabel();
    inputField = new javax.swing.JTextField();
    jPanel2 = new javax.swing.JPanel();
    outputLabel = new javax.swing.JLabel();
    jLabel1 = new javax.swing.JLabel();
    jPanel3 = new javax.swing.JPanel();
    convertButton = new javax.swing.JButton();
    jButton1 = new javax.swing.JButton();
    jPanel4 = new javax.swing.JPanel();
    imageLabel = new javax.swing.JLabel();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setName("Form"); // NOI18N

    jPanel5.setBorder(javax.swing.BorderFactory.createEmptyBorder(12, 12, 12, 12));
    jPanel5.setName("jPanel5"); // NOI18N
    jPanel5.setLayout(new java.awt.BorderLayout());

    jPanel1.setName("jPanel1"); // NOI18N
    jPanel1.setLayout(new java.awt.BorderLayout(8, 0));

    org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(org.qyouti.QyoutiApp.class).getContext().getResourceMap(QRCodeTestFrame.class);
    jLabel2.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
    jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
    jLabel2.setName("jLabel2"); // NOI18N
    jPanel1.add(jLabel2, java.awt.BorderLayout.WEST);

    inputField.setFont(resourceMap.getFont("inputField.font")); // NOI18N
    inputField.setText(resourceMap.getString("inputField.text")); // NOI18N
    inputField.setName("inputField"); // NOI18N
    jPanel1.add(inputField, java.awt.BorderLayout.CENTER);

    jPanel5.add(jPanel1, java.awt.BorderLayout.NORTH);

    jPanel2.setName("jPanel2"); // NOI18N
    jPanel2.setLayout(new java.awt.BorderLayout(8, 0));

    outputLabel.setFont(resourceMap.getFont("outputLabel.font")); // NOI18N
    outputLabel.setText(resourceMap.getString("outputLabel.text")); // NOI18N
    outputLabel.setName("outputLabel"); // NOI18N
    jPanel2.add(outputLabel, java.awt.BorderLayout.CENTER);

    jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
    jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
    jLabel1.setName("jLabel1"); // NOI18N
    jPanel2.add(jLabel1, java.awt.BorderLayout.WEST);

    jPanel5.add(jPanel2, java.awt.BorderLayout.SOUTH);

    jPanel3.setName("jPanel3"); // NOI18N
    jPanel3.setLayout(new java.awt.GridBagLayout());

    convertButton.setText(resourceMap.getString("convertButton.text")); // NOI18N
    convertButton.setName("convertButton"); // NOI18N
    convertButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        convertButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
    jPanel3.add(convertButton, gridBagConstraints);

    jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
    jButton1.setName("jButton1"); // NOI18N
    jButton1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton1ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    jPanel3.add(jButton1, gridBagConstraints);

    jPanel5.add(jPanel3, java.awt.BorderLayout.WEST);

    jPanel4.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10), javax.swing.BorderFactory.createEtchedBorder()));
    jPanel4.setName("jPanel4"); // NOI18N
    jPanel4.setLayout(new java.awt.BorderLayout());

    imageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    imageLabel.setText(resourceMap.getString("imageLabel.text")); // NOI18N
    imageLabel.setName("imageLabel"); // NOI18N
    jPanel4.add(imageLabel, java.awt.BorderLayout.CENTER);

    jPanel5.add(jPanel4, java.awt.BorderLayout.CENTER);

    getContentPane().add(jPanel5, java.awt.BorderLayout.CENTER);

    pack();
  }// </editor-fold>//GEN-END:initComponents


    private void convertButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_convertButtonActionPerformed
    {//GEN-HEADEREND:event_convertButtonActionPerformed

      task = "oneshot";
      Thread thread = new Thread(this);
      thread.start();

    }//GEN-LAST:event_convertButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
    {//GEN-HEADEREND:event_jButton1ActionPerformed

      task = "multiple";
      Thread thread = new Thread(this);
      thread.start();

    }//GEN-LAST:event_jButton1ActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {
    java.awt.EventQueue.invokeLater(new Runnable()
    {

      public void run()
      {
        new QRCodeTestFrame().setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton convertButton;
  private javax.swing.JLabel imageLabel;
  private javax.swing.JTextField inputField;
  private javax.swing.JButton jButton1;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JPanel jPanel3;
  private javax.swing.JPanel jPanel4;
  private javax.swing.JPanel jPanel5;
  private javax.swing.JLabel outputLabel;
  // End of variables declaration//GEN-END:variables

  public String randomInput(int length)
  {
    StringBuffer buffer = new StringBuffer(length + 1);
    int r;
    for (int i = 0; i < length; i++)
    {
      do
      {
        r = random.nextInt() & 0x7f;
      }
      //while ( r < 0x20 || (r >= 0x7f && r<=0xa0) );
      while (!Character.isLetterOrDigit(r));
      buffer.append((char) r);
    }
    return buffer.toString();
  }

  public byte[] randomBinaryInput(int length)
  {
    byte[] buffer = new byte[length];
    int r;
    for (int i = 0; i < length; i++)
      buffer[i] = (byte)(random.nextInt() & 0xff);
    return buffer;
  }

  


  public void run()
  {
    int attempts;
    int cycles = "oneshot".equalsIgnoreCase(task) ? 1 : 10000;
    String input, output;
    byte[] binput;
    byte[] boutput;
    File workingfolder = new File("/home/jon/Desktop/test");
    Result result;
    BufferedImage dirtyimage;

    for (int i = 0; i < cycles; i++)
    {
      outputLabel.setText( Integer.toString(i) );
      //binput = randomBinaryInput( (i / 100) + 10 );
      if (i == 0)
      {
        input = inputField.getText();
      } else
      {
        input = randomInput((i / 200) + 15);
        inputField.setText(input);
      }

      output = null;
      boutput = null;
      result = null;
      try
      {
        image = ZXingCodec.encode2DImage(input);
        //image = QRCodec.dirtyUpImage( image );
        //image = QRCodec.encodeImage(binput);
        imageLabel.setIcon(new ImageIcon(image));

        output = ZXingCodec.decodeToString( BarcodeFormat.QR_CODE, image );
        //boutput = QRCodec.decodeToByteArray( image );
        //outputLabel.setText(output);
      } catch (Exception ex)
      {
        System.out.println( "Exception generating code." );
        ex.printStackTrace();
      }

      for ( attempts=1; output == null && attempts<100; attempts++ )
      {
        //System.out.println( "Trying dirty image. Attempt " + attempts );
        dirtyimage = ZXingCodec.dirtyUpImage( image );
        imageLabel.setIcon( new ImageIcon(dirtyimage) );
        try
        {
          output = ZXingCodec.decodeToString( BarcodeFormat.QR_CODE, dirtyimage );
        }
        catch ( Exception ex2 )
        {
          //System.out.println( "Exception generating code." );
          //ex2.printStackTrace();
        }
      }

      if ( attempts > 1 )
        System.out.println( "Decoded [" + input + "] after " + attempts + " attempts." );

      if ( output == null )
      {
        System.out.println( "Failed to decode [" + input + "] after " + attempts + " attempts." );
        break;
        //continue;
      }

      if ( input.length() != output.length() )
      {
        System.out.println( "Input and output different lengths." );
        continue;
      }

      if ( !input.equals( output ) )
        System.out.println("Failed to decode: [" + input + "] [" + output + "]" );
      /*
      if ( boutput != null )
      {
        for ( int j=0; j<binput.length; j++ )
          if ( binput[j] != boutput[j] )
          {
            System.out.println(
                  "Unmatched input and output [" +
                  Integer.toHexString( binput[j] ) +
                  "] [" +
                  Integer.toHexString( boutput[j] ) +
                  "]" );
            break;
          }
      }
       */
    }

    System.out.println( "Ended normally." );

  }
}
